package godev

import (
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

func (h *handler) FileWatcherStart(wg *sync.WaitGroup) {
	defer wg.Done()

	if h.watcher == nil {
		h.terminal.MsgError("No file watcher found")
		return
	}

	h.RegisterFiles()

	go h.watchEvents()
	defer h.watcher.Close()

	h.terminal.MsgOk("Listening for File Changes ... ")

	// select {}
}

func (h *handler) RegisterFiles() {

	h.terminal.MsgOk("RegisterFiles APP ROOT DIR: " + APP_ROOT_DIR)

	reg := map[string]struct{}{}
	// fmt.Println("carpeta registrada:", folder)
	filepath.Walk(APP_ROOT_DIR, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() && !h.Contain(path) {
			if _, exist := reg[path]; !exist {

				h.watcher.Add(path)

				reg[path] = struct{}{}

				h.terminal.Msg("watch path Add: " + path)
				// fmt.Println("** NEW PATH:", path)
			}
		}
		return nil
	})
}

func (h *handler) watchEvents() {
	lastActions := make(map[string]time.Time)

	for {
		select {
		case event, ok := <-h.watcher.Events:
			if !ok {
				return
			}

			h.terminal.Msg("file-change 1:", event.Name)

			if lastTime, ok := lastActions[event.Name]; !ok || time.Since(lastTime) > 1*time.Second {

				h.terminal.MsgInfo("file-change:", event.Name)

				lastActions[event.Name] = time.Now()
			}

		case err, ok := <-h.watcher.Errors:
			if !ok {
				return
			}

			h.terminal.MsgError("watcher:", err)
		}
	}
}

func (h handler) Contain(path string) bool {
	var no_add_to_watch = []string{".devcontainer", ".git", ".vscode", config.OutputDir}

	for _, value := range no_add_to_watch {
		if strings.Contains(path, value) {
			return true
		}
	}

	return false
}
